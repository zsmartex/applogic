class Label
  include JSON::Serializable

  property key : String
  property value : String
  property scope : String
  property description : String?
  property created_at : Time
  property updated_at : Time
end

class Document < BaseModel
  skip_default_columns

  property member : Member?

  STATES = %w[pending active rejected]

  table do
    primary_key id : Int32

    column member_id : Int32
    column first_name : String
    column last_name : String
    column country : String
    column doc_type : String
    column doc_number : String
    column state : String = "pending"
    column front_upload_file_name : String
    column back_upload_file_name : String
    column in_hand_upload_file_name : String

    column created_at : Time, autogenerated: true
    column updated_at : Time, autogenerated: true
  end

  def self.create(**args)
    document = SaveDocument.create!(**args)
    document.delete_old_document
  end

  def member
    @member ||= Member::BaseQuery.find(member_id)
  end

  def delete_old_document
    documents = Document::BaseQuery.new
      .member_id(member_id)
      .id.not.eq(id)
      .results
    puts id

    documents.each do |document|
      SaveDocument.update!(document, state: "rejected") if document.state != "rejected"
    end
  end

  def create_or_update_label
    response = HTTP::Client.post(
      "http://barong:8001/api/v2/management/labels/list",
      headers: HTTP::Headers{ "Content-Type" => "application/json" },
      body: generate_jwt_management({
        :user_uid => member.uid
      })
    )

    labels = Array(Label).from_json(response.body)
    document_label = labels.find { |label| label.key == "document" }

    if document_label.nil?
      HTTP::Client.post(
        "http://barong:8001/api/v2/management/labels",
        headers: HTTP::Headers{ "Content-Type" => "application/json" },
        body: generate_jwt_management(
          {
            :user_uid => member.uid,
            :key => "document",
            :value => "pending"
          }
        )
      )
    end

    if state == "active" || state == "rejected"
      HTTP::Client.put(
        "http://barong:8001/api/v2/management/labels",
        headers: HTTP::Headers{ "Content-Type" => "application/json" },
        body: generate_jwt_management(
          {
            :user_uid => member.uid,
            :key => "document",
            :value => state == "active" ? "verified" : "rejected"
          }
        )
      )
    end
  end

  def to_json
    {
      id:                         id,
      member_id:                  member.id,
      first_name:                 first_name,
      last_name:                  last_name,
      country:                    country,
      doc_type:                   doc_type,
      doc_number:                 doc_number,
      state:                      state,
      front_upload_file_name:     front_upload_file_name,
      back_upload_file_name:      back_upload_file_name,
      in_hand_upload_file_name:   in_hand_upload_file_name,
      created_at:                 created_at,
      updated_at:                 updated_at
    }
  end

  def for_global
    {
      id:                         id,
      first_name:                 first_name,
      last_name:                  last_name,
      country:                    country,
      doc_type:                   doc_type,
      doc_number:                 doc_number,
      state:                      state,
      created_at:                 created_at,
      updated_at:                 updated_at
    }
  end
end
