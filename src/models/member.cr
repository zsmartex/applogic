class Member < BaseModel
  skip_default_columns

  table do
    primary_key id : Int32

    column uid : String
    column email : String
    column level : Int32
    column role : String
    column state : String
    column referral_uid : String?

    column created_at : Time, autogenerated: true
    column updated_at : Time, autogenerated: true
  end

  def self.create(**args)
    SaveMember.create!(**args)
  end

  # Create Member object from payload
  # == Example payload
  # {
  #   :iss=>"barong",
  #   :sub=>"session",
  #   :aud=>["finex"],
  #   :email=>"admin@barong.io",
  #   :referral_uid=>"ID26V2D14DB8",
  #   :uid=>"ID24C2D87DB5",
  #   :role=>"admin",
  #   :state=>"active",
  #   :level=>"3",
  #   :iat=>1540824073,
  #   :exp=>1540824078,
  #   :jti=>"4f3226e554fa513a"
  # }
  def self.from_payload(params)
    member = Member::BaseQuery.new.uid(params["uid"].to_s).email(params["email"].to_s).first?
    unless member
      member = Member.create(
        uid: params["uid"].to_s,
        email: params["email"].to_s,
        level: params["level"].to_s.to_i,
        state: params["state"].to_s,
        role: params["role"].to_s
      )
    end

    SaveMember.update!(member, referral_uid: params["referral_uid"].to_s) if params["referral_uid"]?

    member.reload
  end

  def to_json
    {
      uid: uid,
      email: email,
      level: level,
      role: role,
      state: state,
      created_at: created_at,
      updated_at: updated_at,
    }
  end
end
